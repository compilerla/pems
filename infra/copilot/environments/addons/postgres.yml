Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The name of the environment being deployed.
  # Customize your Aurora Serverless cluster by setting the default value of the following parameters.
  postgresDBName:
    Type: String
    Description: The name of the initial database to be created in the Aurora Serverless v2 cluster.
    Default: postgres
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints
  VPCID:
    Type: String
    Description: The ID of the VPC in which to create the Aurora Serverless v2 cluster.
    Default: ""
  PrivateSubnets:
    Type: String
    Description: The IDs of the private subnets in which to create the Aurora Serverless v2 cluster.
    Default: ""

Mappings:
  postgresEnvScalingConfigurationMap:
    dev:
      "DBMinCapacity": 0.5 # AllowedValues: from 0.5 through 128
      "DBMaxCapacity": 8 # AllowedValues: from 0.5 through 128

    prod:
      "DBMinCapacity": 0.5 # AllowedValues: from 0.5 through 128
      "DBMaxCapacity": 8 # AllowedValues: from 0.5 through 128

    test:
      "DBMinCapacity": 0.5 # AllowedValues: from 0.5 through 128
      "DBMaxCapacity": 8 # AllowedValues: from 0.5 through 128

    All:
      "DBMinCapacity": 0.5 # AllowedValues: from 0.5 through 128
      "DBMaxCapacity": 8 # AllowedValues: from 0.5 through 128

Resources:
  postgresDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: Group of private subnets for Aurora Serverless v2 cluster.
      SubnetIds: !Split [",", !Ref PrivateSubnets]

  postgresWorkloadSecurityGroup:
    Metadata:
      "aws:copilot:description": "A security group for one or more workloads to access the Aurora Serverless v2 cluster postgres"
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "The Security Group to access Aurora Serverless v2 cluster postgres."
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub "copilot-${App}-${Env}-Aurora"

  postgresDBClusterSecurityGroup:
    Metadata:
      "aws:copilot:description": "A security group for your Aurora Serverless v2 cluster postgres"
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Security Group for the Aurora Serverless v2 cluster.
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub "copilot-${App}-${Env}-Aurora"

  postgresDBClusterSecurityGroupIngressFromWorkload:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from one or more workloads in the environment.
      GroupId: !Ref postgresDBClusterSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 5432
      SourceSecurityGroupId: !Ref postgresWorkloadSecurityGroup

  postgresAuroraSecret:
    Metadata:
      "aws:copilot:description": "A Secrets Manager secret to store your DB credentials"
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub Aurora main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
  postgresDBClusterParameterGroup:
    Metadata:
      "aws:copilot:description": "A DB parameter group for engine configuration values"
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Description: !Ref "AWS::StackName"
      Family: "aurora-postgresql16"
      Parameters:
        client_encoding: "UTF8"

  postgresDBCluster:
    Metadata:
      "aws:copilot:description": "The postgres Aurora Serverless v2 database cluster"
    Type: "AWS::RDS::DBCluster"
    Properties:
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref postgresAuroraSecret,
            ":SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref postgresAuroraSecret,
            ":SecretString:password}}",
          ],
        ]
      DatabaseName: !Ref postgresDBName
      Engine: "aurora-postgresql"
      EngineVersion: "16.2"
      DBClusterParameterGroupName: !Ref postgresDBClusterParameterGroup
      DBSubnetGroupName: !Ref postgresDBSubnetGroup
      Port: 5432
      VpcSecurityGroupIds:
        - !Ref postgresDBClusterSecurityGroup
      ServerlessV2ScalingConfiguration:
        # Replace "All" below with "!Ref Env" to set different autoscaling limits per environment.
        MinCapacity:
          !FindInMap [postgresEnvScalingConfigurationMap, All, DBMinCapacity]
        MaxCapacity:
          !FindInMap [postgresEnvScalingConfigurationMap, All, DBMaxCapacity]

  postgresDBWriterInstance:
    Metadata:
      "aws:copilot:description": "The postgres Aurora Serverless v2 writer instance"
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBClusterIdentifier: !Ref postgresDBCluster
      DBInstanceClass: db.serverless
      Engine: "aurora-postgresql"
      PromotionTier: 1
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region

  postgresSecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref postgresAuroraSecret
      TargetId: !Ref postgresDBCluster
      TargetType: AWS::RDS::DBCluster

Outputs:
  postgresSecret:
    Description: "The JSON secret that holds the database username and password. Fields are 'host', 'port', 'dbname', 'username', 'password', 'dbClusterIdentifier' and 'engine'"
    Value: !Ref postgresAuroraSecret
    Export:
      Name: !Sub ${App}-${Env}-postgresAuroraSecret
  postgresSecurityGroup:
    Description: "The security group to attach to the workload."
    Value: !Ref postgresWorkloadSecurityGroup
    Export:
      Name: !Sub ${App}-${Env}-postgresSecurityGroup
